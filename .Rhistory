# forecast
zbar <- fields$variable2
zbar <- zbar[zbar > 1]
zbar <- zbar[which(zbar > 1)]
# forecast
zbar <- fields$variable2
zbar[which(zbar > 1)] <- 1
zbar[!which(zbar > 1)] <- 0
zbar
zbar[zbar > 1] <- 1
zbar[zbar <1)] <- 0
zbar[zbar <1] <- 0
source('~/GitHub/random-fields/build_ensemble.R')
test <- build_ensemble(0.8, plot=FALSE)
View(test)
sum(test$X1 > 1)
mean(test$X1 > 1)
source('~/GitHub/random-fields/build_ensemble.R')
test <- build_ensemble(0.8)
test <- build_ensemble(0.8)
test <- build_ensemble(0.8, n =4)
x <- y <- seq(-10, 10, 0.2)
test <- build_ensemble(0.8, x = x, y = y)
source(build_ensemble.R)
source(./build_ensemble.R)
source(/build_ensemble.R)
source("/build_ensemble.R")
source("build_ensemble.R")
?source
thresh <- seq(0, 4, 0.5)
test <- build_ensemble(0.8)
colMeans(test)
colMeans(test > 1)
?colMeans
?sample
sample(10, 2, replace = TRUE)
m <- data.frame(matrix(sample(100, 20, replace = TRUE), ncol = 4))
View(m)
colMeans(m)
colMeans(m > 50)
m <- colMeans(m > 50)
m[1]
m[2:]
m[-1]
sum(m[-1])
mean(m[-1])
thresh_stats <- data.frame()
c(m[1], mean(m[-1]))
?data.frame
?as.character
?sapply(list, function)
?sapply
sapply(thresh, as.character)
?data.frame
test <- data.frame(row.names = sapply(thresh, as.character))
View(test)
?colnames
colnames(thresh_stats) <- c("observation", "ensemble mean")
source("build_ensemble.R")
thresh <- seq(0, 4, 0.5)
thresh_stats <-  data.frame(row.names = sapply(thresh, as.character))
for (t in thresh) {
data <- build_ensemble(xi=0.8)
m <- colMeans(data > t)
tresh_stats[t,] <- c(m[1], mean(m[-1]))
}
for (t in thresh) {
data <- build_ensemble(xi=0.8)
m <- colMeans(data > t)
thresh_stats[t,] <- c(m[1], mean(m[-1]))
}
for (t in thresh) {
data <- build_ensemble(xi=0.8)
m <- colMeans(data > t)
thresh_stats[t,] <- c(mean(m[-1]))
}
View(thresh_stats)
?rbind
source("build_ensemble.R")
thresh <- seq(0, 4, 0.5)
for (t in thresh) {
data <- build_ensemble(xi=0.8)
m <- colMeans(data > t)
thresh_stats <- rbind(thresh_stats, c(t, m[1], mean(m[-1])))
}
thresh_stats <-  data.frame()
for (t in thresh) {
data <- build_ensemble(xi=0.8)
m <- colMeans(data > t)
thresh_stats <- rbind(thresh_stats, c(t, m[1], mean(m[-1])))
}
View(thresh_stats)
colnames(thresh_stats) <- c("threshhold", "observation", "ensemble mean")
test <- build_ensemble(0.8, plot=TRUE)
source('~/GitHub/random-fields/binary_mask.R')
View(thresh_stats)
max(data)
?round
round(0.123456, 5)
thresh_stats <-  data.frame()
for (t in thresh) {
data <- build_ensemble(xi=0.8)
m <- colMeans(data > t)
obs <- round(m[1], 5)
ensemble <- round(mean(m[-1]), 5)
diff <- obs - ensemble
thresh_stats <- rbind(thresh_stats, c(t, obs, ensemble, diff))
}
colnames(thresh_stats) <- c("threshhold", "observation", "ensemble mean", "difference")
thresh_stats <-  data.frame()
for (t in thresh) {
data <- build_ensemble(xi=0.8)
m <- colMeans(data > t)
obs <- round(m[1], 5)
ensemble <- round(mean(m[-1]), 5)
diff <- (obs - ensemble)^2
thresh_stats <- rbind(thresh_stats, c(t, obs, ensemble, diff))
}
colnames(thresh_stats) <- c("threshhold", "observation", "ensemble mean", "sqrd difference")
thresh_stats <-  data.frame()
for (t in thresh) {
data <- build_ensemble(xi=0.8)    # obs. w/ 11 ensemble members
m <- colMeans(data > t)
obs <- round(m[1], 5)             # obs mean
ensemble <- round(mean(m[-1]), 5) # mean of ensemble means
diff <- (obs - ensemble)^2        # sqrd difference of obs and ensemble means
thresh_stats <- rbind(thresh_stats, c(t, obs, ensemble, diff))
}
colnames(thresh_stats) <- c("threshhold", "observation", "ensemble_mean", "sqrd_diff")
mean(thresh_stats["sqrd_diff"])
View(thresh_stats)
mean(thresh_stats[sqrd_diff])
mean(thresh_stats["sqrd_diff"])
summary(thresh_stats)
?info
?typeof
typeof(thresh_stats)
typeof(thresh_stats["sqrd_diff"])
mean(thresh_stats$sqrd_diff)
View(thresh_stats)
0.2^2
0.02^2
source('~/GitHub/random-fields/simulate.R')
source('~/GitHub/random-fields/simulate.R')
xi <- seq(0.5,0.9,0.05)
xi_stats <-  data.frame()
for (x in xi) {
m <- tresh_mean(x)
xi_stats <- rbind(tresh_stats, c(x, m))
}
for (x in xi) {
m <- tresh_mean(x)
xi_stats <- rbind(xi_stats, c(x, m))
}
for (x in xi) {
m <- thresh_mean(x)
xi_stats <- rbind(xi_stats, c(x, m))
}
View(xi_stats)
colnames(xi_stats) <- c("xi", "MSD")
xi_stats$xi[min(xi_stats$MSD)]
> xi_stats$xi[which.min(xi_stats$MSD)]
xi_stats$xi[which.min(xi_stats$MSD)]
source('~/GitHub/random-fields/simulate.R')
source('~/GitHub/random-fields/simulate.R')
View(dat)
t(dat)
mode(dat)
mean(dat)
test <- c(0.5, 0.5, 0.4, 0.3)
test
t(test)
mode(test)
?mdoe
?mode
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
getmode(test)
source('~/GitHub/random-fields/simulate.R')
source('~/GitHub/random-fields/simulate.R')
mean(dat)
getmode(dat)
plot(dat)
hist(dat)
summary(dat)
source('~/GitHub/random-fields/simulate.R')
summary(dat)
hist(dat)
getmode(dat)
test <- build_ensemble(0.8, plot = TRUE)
source('~/GitHub/random-fields/functions/build_ensemble.R')
test <- build_ensemble(0.8, plot = TRUE)
build_ensemble()
build_ensemble
?RFplotSimulation
ls()
View(test)
replicate(2,c(2,3,3))
is(test)
dim(test)
names(test)
image(matrix(test$X1,201,201))
library(fields)
image.plot(matrix(test$X1,201,201))
image.plot(matrix(test$X1,201,201),col=terrain.colors(256))
?image.plot
?terrain.colors
image.plot(matrix(test$X1,201,201),col=two.colors(start="white",stop="black")
)
image.plot(matrix(test$X1,201,201),col=two.colors(start="white",end="black"))
source('~/GitHub/random-fields/functions/build_ensemble.R')
test <- build_ensemble(0.8)
image.plot(matrix(test$X1,201,201),col=two.colors(start="white",end="black"))
?RMbiwm
thresh_mean(0.6)
source('~/GitHub/random-fields/functions/thresh_mean.R')
test <- thresh_mean(0.6)
source('~/GitHub/random-fields/binary_mask.R')
source('~/GitHub/random-fields/binary_mask.R')
View(thresh_stats)
library(RandomFields)
source("functions/build_ensemble.R")
source("functions/rank_obs.R")
source("functions/build_ensemble.R")
source("functions/rank_obs.R")
xi <- 0.5 # weight ratio between ensemble mean and variance
samp_size <- 100
rank_sim <- function(xi, tau) {
data <- build_ensemble(xi)
return(rank_obs(data, tau))
}
## collect rank data on tau values
tau <- seq(0, 4, 0.5)
tau_rank_dat <- data.frame()
for(t in tau) {
tau_rank_dat[paste(t)] <- replicate(samp_size, rank_sim(xi, t))
}
?data.frame
?cbind
xx <- data.frame(I = rep(0,2))
View(xx)
cbind(xx, X = rbind(a = 1, b = 1:3))
View(xx)
?replicate
?rep
cbind(xx, rep("a", 2))
cbind(xx, X1 = rep("a", 2))
source("functions/build_ensemble.R")
source("functions/rank_obs.R")
xi <- 0.5 # weight ratio between ensemble mean and variance
samp_size <- 100
rank_sim <- function(xi, tau) {
data <- build_ensemble(xi)
return(rank_obs(data, tau))
}
## collect rank data on tau values
tau <- seq(0, 4, 0.5)
tau_rank_dat <- data.frame()
for(t in tau) {
tau_rank_dat <- cbind(tau_rank_dat,
paste(t) = replicate(samp_size, rank_sim(xi, t)))
}
source("functions/build_ensemble.R")
source("functions/rank_obs.R")
xi <- 0.5 # weight ratio between ensemble mean and variance
samp_size <- 100
rank_sim <- function(xi, tau) {
data <- build_ensemble(xi)
return(rank_obs(data, tau))
}
## collect rank data on tau values
tau <- seq(0, 4, 0.5)
tau_rank_dat <- data.frame()
for(t in tau) {
tau_rank_dat <- cbind(tau_rank_dat,
paste(t) = replicate(samp_size, rank_sim(xi, t)))
}
xx <- data.frame(I = rep(0,2))
xx <- cbind(xx, X = rep("a",2))
xx <- cbind(xx, X = rep("a",2))
View(xx)
for(t in tau) {
col <- paste(t)
tau_rank_dat <- cbind(tau_rank_dat,
col = replicate(samp_size, rank_sim(xi, t)))
}
source("functions/build_ensemble.R")
source("functions/rank_obs.R")
xi <- 0.5 # weight ratio between ensemble mean and variance
samp_size <- 100
rank_sim <- function(xi, tau) {
data <- build_ensemble(xi)
return(rank_obs(data, tau))
}
## collect rank data on tau values
tau <- seq(0, 4, 0.5)
tau_rank_dat <- data.frame()
for(t in tau) {
col <- paste(t)
tau_rank_dat <- cbind(tau_rank_dat,
col = replicate(samp_size, rank_sim(xi, t)))
}
for(t in tau) {
col <- paste(t)
print(col)
tau_rank_dat <- cbind(tau_rank_dat,
col = replicate(samp_size, rank_sim(xi, t)))
}
samp_size <- 5
for(t in tau) {
col <- paste(t)
print(col)
tau_rank_dat <- cbind(tau_rank_dat,
col = replicate(samp_size, rank_sim(xi, t)))
}
?cbind
test <- data.frame()
test <- cbind(test, col = replicate(4, "a"))
test <- data.frame(row.names = 1:4)
test <- cbind(test, col = replicate(4, "a"))
View(test)
tau_rank_dat <- data.frame(row.names = 1:samp_size)
for(t in tau) {
col <- paste(t)
print(col)
tau_rank_dat <- cbind(tau_rank_dat,
col = replicate(samp_size, rank_sim(xi, t)))
}
View(tau_rank_dat)
rm(test)
samp_size <- 30
tau_rank_dat <- data.frame(row.names = 1:samp_size)
for(t in tau) {
col <- paste(t)
print(col)
tau_rank_dat <- cbind(tau_rank_dat,
col = replicate(samp_size, rank_sim(xi, t)))
}
View(tau_rank_dat)
## plot histograms for each tau
par(mfrow=c(3,3))
for (i in 1:length(tau)) {
hist(tau_rank_dat[,i],
main = paste("tau = ", tau[i], sep = ""),
xlab = "Observation rank" )
}
samp_size <- 100
for(t in tau) {
col <- paste(t)
print(col)
tau_rank_dat <- cbind(tau_rank_dat,
col = replicate(samp_size, rank_sim(xi, t)))
}
source('~/GitHub/random-fields/simulate_rank.R')
## plot histograms for each tau
par(mfrow=c(3,3))
for (i in 1:length(tau)) {
hist(tau_rank_dat[,i],
main = paste("tau = ", tau[i], sep = ""),
xlab = "Observation rank" )
}
write.csv(tau_tank_dat, "tau_rank_dat_n100_x050")
write.csv(tau_rank_dat, "tau_rank_dat_n100_x050")
write.csv(tau_rank_dat, "tau_rank_dat_n100_x050.csv")
dev.print(png, filename='rank_hists')
?ggsave
ggsave("rank_hists")
for (i in 1:length(tau)) {
hist(tau_rank_dat[,i],
main = paste("tau = ", tau[i], sep = ""),
xlab = "Observation rank" )
}
ggsave("rank_hists")
save(tau_rank_dat, file = "tau_rank_dat_n100_xi050.RData")
source('~/GitHub/random-fields/functions/build_ensemble.R')
test <- build_ensemble(0.75, plot=TRUE)
source("grid_arrange_shared_legend.R")
require(RandomFields)
#require(fields)
require(RColorBrewer)
require(ggplot2)
build_ensemble <- function(xi, x=NULL, y=NULL, n=11, plot=FALSE) {
# xi: controls standard variance of model
# x, y: field dimensions
# n: number of ensemble members
# plot: display or not?
if (is.null(x) | is.null(y)) {
x <- y <- seq(-20, 20, 0.2)
}
## parameters
smooth <- c(1.5, 1.5, 1.5)
scale <- c(4, 4, 4) # all same
corr <- c(1, 1)
rho <- 0.8
## ensemble
model_whittle <- RMwhittle(nu = smooth[1], notinvnu = TRUE,
scale = scale[1], var = corr[1])
omega <- replicate(n, RFsimulate(model_whittle, x, y)$variable1)
## model
model_biwm <- RMbiwm(nu = smooth, s = scale, cdiag = corr, rhored = rho)
fields <- RFsimulate(model_biwm, x, y)
zbar <- fields$variable2
zbar <- replicate(n, zbar)
ensemble <- xi*zbar + sqrt(1-xi^2)*omega
if(plot){
source("grid_arrange_shared_legend.R")
## format data as xyz dataframe
dat <- expand.grid(x = x, y = y)
dat["z"] <- fields$variable1
l.min <- floor(min(fields$variable1))
l.max <- ceiling(max(fields$variable1))
## collect each plot in a list
fplots <- list()
## Observation plot
fplots[[1]] <- ggplot(dat, aes(x, y)) +
geom_raster(aes(fill = z)) +
scale_fill_gradientn(colours = brewer.pal(9, "Blues"),
limits=c(l.min, l.max),
breaks=seq(l.min,l.max,by=1)) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) + # center title
labs(x="",y="",title="Observation")
## Ensemble plots
for (i in 1:ncol(ensemble))
local({
i <- i
# update data being plotted
dat$z <- ensemble[,i]
p1 <- ggplot(dat, aes(x, y)) +
geom_raster(aes(fill = z)) +
scale_fill_gradientn(colours = brewer.pal(9, "Blues"),
limits=c(l.min, l.max),
breaks=seq(l.min,l.max,by=1)) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) + # center title
labs(x="",y="",title=paste("Forecast", i, sep = ""))
# print(i)
# print(p1)
fplots[[i+1]] <<- p1  # add each plot into plot list
})
## arrange plots in grid
quartz()
grid_arrange_shared_legend(fplots, position = "right")
## Second idea: good but not great
#dim <- sqrt(length(fields$variable1))
# nrows <- round((ncol(ensemble)+1)/4)
# quartz()
# par(mfrow=c(nrows, 4))
# image.plot(matrix(fields$variable1,dim,dim), col=brewer.pal(9, "Blues"),
#            main="Observation")
# for (index in 1:ncol(ensemble)) {
#   image.plot(matrix(ensemble[,index],dim,dim), col=brewer.pal(9, "Blues"),
#              main=paste("Forecast", index))
# }
## First idea
# quartz() #separate window for each ensemble
# for (index in 1:ncol(ensemble)) {
#   fields$variable2 <- ensemble[,index]
#   plot(fields)
# }
## For comparison
# quartz()
# plot(fields)
## NOTE: custom plots appear to be reflected over x-axis from RF version
}
return(data.frame(fields$variable1, ensemble))
}
source("grid_arrange_shared_legend.R")
source('~/GitHub/random-fields/functions/grid_arrange_shared_legend.R')
source('~/GitHub/random-fields/functions/build_ensemble.R')
test <- build_ensemble(0.75, plot=TRUE)
source('~/GitHub/random-fields/functions/build_ensemble.R')
test <- build_ensemble(0.8, plot=TRUE)
source('~/GitHub/random-fields/functions/grid_arrange_shared_legend.R')
test <- build_ensemble(0.8, plot=TRUE)
source('~/GitHub/random-fields/functions/build_ensemble.R')
test <- build_ensemble(0.8, plot=TRUE)
source('~/GitHub/random-fields/functions/build_ensemble.R')
test <- build_ensemble(0.8, plot=TRUE)
source('~/GitHub/random-fields/functions/build_ensemble.R')
test <- build_ensemble(0.8, plot=TRUE)
source('~/GitHub/random-fields/functions/build_ensemble.R')
test <- build_ensemble(0.8, plot=TRUE)
source('~/GitHub/random-fields/functions/build_ensemble.R')
test <- build_ensemble(0.8, plot=TRUE)
source('~/GitHub/random-fields/functions/build_ensemble.R')
source('~/GitHub/random-fields/functions/build_ensemble.R')
test <- build_ensemble(0.8, plot=TRUE)
test[,1]
View(test)
source('~/GitHub/random-fields/functions/build_ensemble.R')
source('~/GitHub/random-fields/functions/plot_fields.R')
plot_fields(test)
source('~/GitHub/random-fields/functions/plot_fields.R')
plot_fields(test)
test <- build_ensemble(0.75)
plot_fields(test)
?scale_fill_discrete
?multiplot
??multiplot
source('~/GitHub/random-fields/functions/multiplot.R')
source('~/GitHub/random-fields/functions/multiplot.R')
source('~/GitHub/random-fields/functions/plot_binary.R')
plot_binary(test)
plot_binary(test, 1)
source('~/GitHub/random-fields/functions/plot_binary.R')
plot_binary(test, 1)
source('~/GitHub/random-fields/functions/plot_binary.R')
plot_binary(test, 1)
plot_binary(test, 3)
