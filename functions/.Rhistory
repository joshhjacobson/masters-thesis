#scale_fill_brewer(palette = "Blues", direction = -1)
scale_fill_gradientn(colours = brewer.pal(9, "Blues"))
#            main="Observation")
# for (index in 1:ncol(ensemble)) {
#   image.plot(matrix(ensemble[,index],dim,dim), col=brewer.pal(9, "Blues"),
#              main=paste("Forecast", index))
# }
# quartz() #separate window for each ensemble
# for (index in 1:ncol(ensemble)) {
#   fields$variable2 <- ensemble[,index]
#   plot(fields)
# }
quartz()
plot(fields)
require(RandomFields)
require(fields)
require(RColorBrewer)
require(ggplot2)
source('~/GitHub/random-fields/functions/build_ensemble.R')
test <- build_ensemble(0.8, plot=TRUE)
source('~/GitHub/random-fields/functions/build_ensemble.R')
test <- build_ensemble(0.8, plot=TRUE)
source('~/GitHub/random-fields/functions/build_ensemble.R')
test <- build_ensemble(0.8, plot=TRUE)
xi <- 0.8
n <- 11
x <- y <- seq(-20, 20, 0.2)
smooth <- c(1.5, 1.5, 1.5)
scale <- c(3, 3, 3) # set all to 1
corr <- c(1, 1)
rho <- 0.8
# ensemble
model_whittle <- RMwhittle(nu = smooth[1], notinvnu = TRUE,
scale = scale[1], var = corr[1])
omega <- replicate(n, RFsimulate(model_whittle, x, y)$variable1)
# model
model_biwm <- RMbiwm(nu = smooth, s = scale, cdiag = corr, rhored = rho)
fields <- RFsimulate(model_biwm, x, y)
zbar <- fields$variable2
zbar <- replicate(n, zbar)
ensemble <- xi*zbar + sqrt(1-xi^2)*omega
# format data as xyz dataframe
dat <- expand.grid(x = x, y = y)
dat["z"] <- fields$variable1
quartz()
View(dat)
ggplot(dat, aes(x, y)) +
geom_raster(aes(fill = z)) +
#scale_fill_brewer(palette = "Blues", direction = -1)
scale_fill_gradientn(colours = brewer.pal(9, "Blues"))
p0 <- ggplot(dat, aes(x, y)) +
geom_raster(aes(fill = z)) +
#scale_fill_brewer(palette = "Blues", direction = -1)
scale_fill_gradientn(colours = brewer.pal(9, "Blues"))
p0
quartz()
plot(p0)
theme_bw()
p0 <- ggplot(dat, aes(x, y)) +
geom_raster(aes(fill = z)) +
#scale_fill_brewer(palette = "Blues", direction = -1)
scale_fill_gradientn(colours = brewer.pal(9, "Blues"))
quartz()
quartz()
plot(p0)
p0 <- ggplot(dat, aes(x, y)) +
geom_raster(aes(fill = z)) +
#scale_fill_brewer(palette = "Blues", direction = -1)
scale_fill_gradientn(colours = brewer.pal(9, "Blues"))
p0 <- ggplot(dat, aes(x, y)) +
geom_raster(aes(fill = z)) +
#scale_fill_brewer(palette = "Blues", direction = -1)
scale_fill_gradientn(colours = brewer.pal(9, "Blues")) +
theme_dark()
quartz()
plot(p0)
p0 <- ggplot(dat, aes(x, y)) +
geom_raster(aes(fill = z)) +
#scale_fill_brewer(palette = "Blues", direction = -1)
scale_fill_gradientn(colours = brewer.pal(9, "Blues")) +
theme_linedraw()
quartz()
plot(p0)
p0 <- ggplot(dat, aes(x, y)) +
geom_raster(aes(fill = z)) +
#scale_fill_brewer(palette = "Blues", direction = -1)
scale_fill_gradientn(colours = brewer.pal(9, "Blues")) +
theme_minimal()
quartz()
plot(p0)
p0 <- ggplot(dat, aes(x, y)) +
geom_raster(aes(fill = z)) +
#scale_fill_brewer(palette = "Blues", direction = -1)
scale_fill_gradientn(colours = brewer.pal(9, "Blues")) +
theme_light()
quartz()
plot(p0)
p0 <- ggplot(dat, aes(x, y)) +
geom_raster(aes(fill = z)) +
#scale_fill_brewer(palette = "Blues", direction = -1)
scale_fill_gradientn(colours = brewer.pal(9, "Blues")) +
theme_minimal()
quartz()
plot(p0)
?theme
?theme_minimal
p0 <- ggplot(dat, aes(x, y)) +
geom_raster(aes(fill = z)) +
#scale_fill_brewer(palette = "Blues", direction = -1)
scale_fill_gradientn(colours = brewer.pal(9, "Blues")) +
theme_minimal() +
theme_update(axis.title.x=element_blank(),
axis.title.y=element_blank())
quartz()
plot(p0)
p0 <- ggplot(dat, aes(x, y)) +
geom_raster(aes(fill = z)) +
#scale_fill_brewer(palette = "Blues", direction = -1)
scale_fill_gradientn(colours = brewer.pal(9, "Blues")) +
theme_minimal() +
#theme_update(axis.title.x=element_blank(),
#             axis.title.y=element_blank())
labs(x="",y="",title="Observation")
quartz()
plot(p0)
# center plot titles
theme_update(plot.title = element_text(hjust = 0.5))
p0 <- ggplot(dat, aes(x, y)) +
geom_raster(aes(fill = z)) +
#scale_fill_brewer(palette = "Blues", direction = -1)
scale_fill_gradientn(colours = brewer.pal(9, "Blues")) +
theme_minimal() +
#theme_update(axis.title.x=element_blank(),
#             axis.title.y=element_blank())
labs(x="",y="",title="Observation")
quartz()
plot(p0)
# center plot titles
theme_update(plot.title = element_text(hjust = 0.5))
p0 <- ggplot(dat, aes(x, y)) +
geom_raster(aes(fill = z)) +
#scale_fill_brewer(palette = "Blues", direction = -1)
scale_fill_gradientn(colours = brewer.pal(9, "Blues")) +
theme_minimal() +
#theme_update(axis.title.x=element_blank(),
#             axis.title.y=element_blank())
labs(x="",y="",title="Observation")
quartz()
plot(p0)
p0 <- ggplot(dat, aes(x, y)) +
geom_raster(aes(fill = z)) +
#scale_fill_brewer(palette = "Blues", direction = -1)
scale_fill_gradientn(colours = brewer.pal(9, "Blues")) +
theme_minimal() +
#theme_update(axis.title.x=element_blank(),
#             axis.title.y=element_blank())
labs(x="",y="",title="Observation") +
theme_update(plot.title = element_text(hjust = 0.5))
quartz()
plot(p0)
p0 <- ggplot(dat, aes(x, y)) +
geom_raster(aes(fill = z)) +
#scale_fill_brewer(palette = "Blues", direction = -1)
scale_fill_gradientn(colours = brewer.pal(9, "Blues")) +
theme_update(plot.title = element_text(hjust = 0.5)) +
theme_minimal() +
#theme_update(axis.title.x=element_blank(),
#             axis.title.y=element_blank())
labs(x="",y="",title="Observation") +
quartz()
plot(p0)
p0 <- ggplot(dat, aes(x, y)) +
geom_raster(aes(fill = z)) +
#scale_fill_brewer(palette = "Blues", direction = -1)
scale_fill_gradientn(colours = brewer.pal(9, "Blues")) +
theme_update(plot.title = element_text(hjust = 0.5)) +
theme_minimal() +
#theme_update(axis.title.x=element_blank(),
#             axis.title.y=element_blank())
labs(x="",y="",title="Observation")
quartz()
plot(p0)
p0 <- ggplot(dat, aes(x, y)) +
geom_raster(aes(fill = z)) +
#scale_fill_brewer(palette = "Blues", direction = -1)
scale_fill_gradientn(colours = brewer.pal(9, "Blues")) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
#theme_update(axis.title.x=element_blank(),
#             axis.title.y=element_blank())
labs(x="",y="",title="Observation")
quartz()
plot(p0)
p0 <- ggplot(dat, aes(x, y)) +
geom_raster(aes(fill = z)) +
scale_fill_gradient(colours = brewer.pal(9, "Blues")) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) + # center title
labs(x="",y="",title="Observation")
quartz()
plot(p0)
p0 <- ggplot(dat, aes(x, y)) +
geom_raster(aes(fill = z)) +
scale_fill_gradient(colours = brewer.pal(9, "Blues")) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) + # center title
labs(x="",y="",title="Observation")
rm(p0)
p0 <- ggplot(dat, aes(x, y)) +
geom_raster(aes(fill = z)) +
scale_fill_gradient(colours = brewer.pal(9, "Blues")) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) + # center title
labs(x="",y="",title="Observation")
plot(p0)
p0 <- ggplot(dat, aes(x, y)) +
geom_raster(aes(fill = z)) +
scale_fill_gradientn(colours = brewer.pal(9, "Blues")) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) + # center title
labs(x="",y="",title="Observation")
plot(p0)
min(dat$z)
max(dat$z)
p0 <- ggplot(dat, aes(x, y)) +
geom_raster(aes(fill = z)) +
scale_fill_gradientn(colours = brewer.pal(9, "Blues"),
limits=c(-4, 4), breaks=seq(-4,4,by=1)) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) + # center title
labs(x="",y="",title="Observation")
quartz()
plot(p0)
plot(fields)
p0 <- ggplot(dat, aes(x, y)) +
geom_raster(aes(fill = z)) +
scale_fill_gradientn(colours = brewer.pal(9, "Blues"))+
#limits=c(-4, 4), breaks=seq(-4,4,by=1)) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) + # center title
labs(x="",y="",title="Observation")
quartz()
plot(p0)
p0 <- ggplot(dat, aes(x, y)) +
geom_raster(aes(fill = z)) +
scale_fill_gradientn(colours = brewer.pal(9, "Blues"),
limits=c(-4, 4), breaks=seq(-4,4,by=1)) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) + # center title
labs(x="",y="",title="Observation")
quartz()
plot(p0)
xi <- 0.8
n <- 11
x <- y <- seq(-20, 20, 0.2)
smooth <- c(1.5, 1.5, 1.5)
scale <- c(3, 3, 3) # set all to 1
corr <- c(1, 1)
rho <- 0.8
## ensemble
model_whittle <- RMwhittle(nu = smooth[1], notinvnu = TRUE,
scale = scale[1], var = corr[1])
omega <- replicate(n, RFsimulate(model_whittle, x, y)$variable1)
## model
model_biwm <- RMbiwm(nu = smooth, s = scale, cdiag = corr, rhored = rho)
fields <- RFsimulate(model_biwm, x, y)
zbar <- fields$variable2
zbar <- replicate(n, zbar)
ensemble <- xi*zbar + sqrt(1-xi^2)*omega
require(RandomFields)
#require(fields)
require(RColorBrewer)
require(ggplot2)
## function to construct forecast ensemble
xi <- 0.8
n <- 11
x <- y <- seq(-20, 20, 0.2)
smooth <- c(1.5, 1.5, 1.5)
scale <- c(3, 3, 3) # set all to 1
corr <- c(1, 1)
rho <- 0.8
## ensemble
model_whittle <- RMwhittle(nu = smooth[1], notinvnu = TRUE,
scale = scale[1], var = corr[1])
omega <- replicate(n, RFsimulate(model_whittle, x, y)$variable1)
## model
model_biwm <- RMbiwm(nu = smooth, s = scale, cdiag = corr, rhored = rho)
fields <- RFsimulate(model_biwm, x, y)
zbar <- fields$variable2
zbar <- replicate(n, zbar)
ensemble <- xi*zbar + sqrt(1-xi^2)*omega
## format data as xyz dataframe
dat <- expand.grid(x = x, y = y)
dat["z"] <- fields$variable1
l.min <- round(min(fields$variable1))
l.max <- round(max(fields$variable1))
## collect each plot in a list
fplots <- list()
## Observation plot
p0 <- ggplot(dat, aes(x, y)) +
geom_raster(aes(fill = z)) +
scale_fill_gradientn(colours = brewer.pal(9, "Blues"),
limits=c(l.min, l.max),
breaks=seq(l.min,l.max,by=1)) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) + # center title
labs(x="",y="",title="Observation")
fplots[[1]] <- p0
## Ensemble plots
for (i in 1:ncol(ensemble))
local({
i <- i
# update data being plotted
dat$z <- ensemble[,i]
p1 <- ggplot(dat, aes(x, y)) +
geom_raster(aes(fill = z)) +
scale_fill_gradientn(colours = brewer.pal(9, "Blues"),
limits=c(l.min, l.max),
breaks=seq(l.min,l.max,by=1)) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) + # center title
labs(x="",y="",title=paste("Forecast", i, sep = ""))
# print(i)
# print(p1)
fplots[[i+1]] <<- p1  # add each plot into plot list
})
## arrange plots in grid
quartz()
grid_arrange_shared_legend(fplots, position = "right")
source("grid_arrange_shared_legend.R")
grid_arrange_shared_legend(fplots, position = "right")
?unit.c
source("grid_arrange_shared_legend.R")
## Ensemble plots
for (i in 1:ncol(ensemble))
local({
i <- i
# update data being plotted
dat$z <- ensemble[,i]
p1 <- ggplot(dat, aes(x, y)) +
geom_raster(aes(fill = z)) +
scale_fill_gradientn(colours = brewer.pal(9, "Blues"),
limits=c(l.min, l.max),
breaks=seq(l.min,l.max,by=1)) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) + # center title
labs(x="",y="",title=paste("Forecast", i, sep = ""))
# print(i)
# print(p1)
fplots[[i+1]] <<- p1  # add each plot into plot list
})
## arrange plots in grid
quartz()
grid_arrange_shared_legend(fplots, position = "right")
require(gridExtra)
grid_arrange_shared_legend(fplots, position = "right")
?unit.c
require(RandomFields)
#require(fields)
require(RColorBrewer)
require(ggplot2)
## function to construct forecast ensemble
xi <- 0.8
n <- 11
x <- y <- seq(-20, 20, 0.2)
## parameters
smooth <- c(1.5, 1.5, 1.5)
scale <- c(3, 3, 3) # set all to 1
corr <- c(1, 1)
rho <- 0.8
## ensemble
model_whittle <- RMwhittle(nu = smooth[1], notinvnu = TRUE,
scale = scale[1], var = corr[1])
omega <- replicate(n, RFsimulate(model_whittle, x, y)$variable1)
## model
model_biwm <- RMbiwm(nu = smooth, s = scale, cdiag = corr, rhored = rho)
fields <- RFsimulate(model_biwm, x, y)
zbar <- fields$variable2
zbar <- replicate(n, zbar)
ensemble <- xi*zbar + sqrt(1-xi^2)*omega
source("grid_arrange_shared_legend.R")
## format data as xyz dataframe
dat <- expand.grid(x = x, y = y)
dat["z"] <- fields$variable1
l.min <- round(min(fields$variable1))
l.max <- round(max(fields$variable1))
## collect each plot in a list
fplots <- list()
## Observation plot
p0 <- ggplot(dat, aes(x, y)) +
geom_raster(aes(fill = z)) +
scale_fill_gradientn(colours = brewer.pal(9, "Blues"),
limits=c(l.min, l.max),
breaks=seq(l.min,l.max,by=1)) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) + # center title
labs(x="",y="",title="Observation")
fplots[[1]] <- p0
## Ensemble plots
for (i in 1:ncol(ensemble))
local({
i <- i
# update data being plotted
dat$z <- ensemble[,i]
p1 <- ggplot(dat, aes(x, y)) +
geom_raster(aes(fill = z)) +
scale_fill_gradientn(colours = brewer.pal(9, "Blues"),
limits=c(l.min, l.max),
breaks=seq(l.min,l.max,by=1)) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) + # center title
labs(x="",y="",title=paste("Forecast", i, sep = ""))
# print(i)
# print(p1)
fplots[[i+1]] <<- p1  # add each plot into plot list
})
## arrange plots in grid
quartz()
grid_arrange_shared_legend(fplots, position = "right")
library(gridExtra)
grid_arrange_shared_legend(fplots, position = "right")
library(grid)
grid_arrange_shared_legend(fplots, position = "right")
source('~/GitHub/random-fields/functions/build_ensemble.R')
source('~/GitHub/random-fields/functions/build_ensemble.R')
test <- build_ensemble(0.8, plot=TRUE)
source('~/GitHub/random-fields/functions/build_ensemble.R')
test <- build_ensemble(0.8, plot=TRUE)
source('~/GitHub/random-fields/functions/build_ensemble.R')
source('~/GitHub/random-fields/functions/build_ensemble.R')
test <- build_ensemble(0.8, plot=TRUE)
test <- build_ensemble(0.8, n=7, plot=TRUE)
## Testing
xi <- seq(0.25,0.75,0.25)
source('~/GitHub/random-fields/functions/build_ensemble.R')
for (ii in xi) {
#quartz()
build_ensemble(xi=ii, plot=TRUE)
}
data <- build_ensemble(0.75)
View(data)
m <- colMeans(data > tau)
tau <- 1
m <- colMeans(data > tau)
(r1 <- rank(x1 <- c(3, 1, 4, 15, 92)))
names(x2) <- letters[1:11]
x2 <- c(3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5)
names(x2) <- letters[1:11]
(r2 <- rank(x2)) # ties are averaged
r2 <- rank(x2)
r2
x2
names(m) <- letters[1:ncol(data)]
m
rank(m) # ties are averaged
r_obs <- rank(m) # ties are averaged
r_obs["a"]
r_obs[1]
r_obs[["a"]]
r_obs[[1]]
m <- colMeans(data > tau)
#names(m) <- letters[1:ncol(data)]
r_obs <- rank(m) # ties are averaged
r_obs[[1]]
r_obs <- rank(m)[[1]] # ties are averaged
r_obs
?replicate
rank_sim <- function(xi, tau) {
data <- build_ensemble(xi)
return(rank_obs(data, tau))
}
tau_rank_dat <- replicate(20, rank_sim(0.5, 1))
source("rank_obs.R")
tau_rank_dat <- replicate(20, rank_sim(0.5, 1))
hist(tau_rank_dat)
tau <- seq(0, 4, 0.5)
tau_rank_dat <- data.frame()
names(tau_rank_dat) <- tau
tau_rank_dat <- data.frame(seq(0, 4, 0.5))
View(tau_rank_dat)
?data.frame
tau_rank_dat <- data.frame(100, 9)
View(tau_rank_dat)
xi <- 0.5
samp_size <- 100
?paste
tau_rank_dat[paste(tau[1])] <- 4
View(tau_rank_dat)
?par
length(tau)
?hist
xi <- 0.5 # weight ratio between ensemble mean and variance
samp_size <- 100
rank_sim <- function(xi, tau) {
data <- build_ensemble(xi)
return(rank_obs(data, tau))
}
## collect rank data on tau values
tau <- seq(0, 4, 0.5)
tau_rank_dat <- data.frame()
for(t in tau) {
tau_rank_dat[paste(t)] <- replicate(samp_size, rank_sim(xi, t))
}
source("build_ensemble.R")
for(t in tau) {
tau_rank_dat[paste(t)] <- replicate(samp_size, rank_sim(xi, t))
}
source("rank_obs.R")
library(RandomFields)
source("functions/build_ensemble.R")
source("functions/rank_obs.R")
source("functions/build_ensemble.R")
